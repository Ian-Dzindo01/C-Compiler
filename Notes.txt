Lexing - tokenizing words and expressions
Buildling a parse tree
Parser:
    Informs of syntax errors
Binding, resolution identify scope
Types stored in attributes or symbol tables
Intermediate representation
Optimization
Byte Code or P - code (portable among chips and devices)
VM that will translate bytecode to specific chip - simplicity and portability but slower runtime
Need a runtime that will take care of GC and related things at execution
Single pass compilers that interleave parsing, analysis and code generation. No global info. Memory is precious.
AST - Abstract Syntax Tree
Use source to source transpiler that. We will use an existing IR target.
JIT - just in time compilation
Compiler - compiles and transpiles, doesnt execute.
Interpreter - executes line by line.
Go is a curiosity - compiler and interpreter.
CPython is the same as go. Most scripting languages are like this.
Lex and Yacc - lexical parsers and analyzers.
Trying to find scanner and parser in Rust.
JIT -  translation of program code into machine code occurs dynamically,
at runtime, rather than ahead of time (AOT) during the compilation phase. Improve efficiency and performance.
Java and C# use JITT
The coexistence of an interpreter and a compiler in Lisp implementations reflects the language's emphasis on interactive development,
rapid prototyping, and adaptability. This combination allows developers to enjoy the benefits of both compiled code for performance and interpreted code for
flexibility during different stages of software development. - interactive development, incremental compilation, debugging and profiling,
cross-platform development, runtime generation.
No parentheses because print is built-in, not a library function.
Reference counting and GC
Build a GC
Implement bitwise, shift, modulo, and conditional operators on your own.
Difference between arguments and parameters.
First class citizens.
Closure functions.
Prototype and class based languages.
Maybe add string manipulation, trig functions, file I/O, networking...
Expressions vs statements
Maybe implement exact columns and where in the line the error occurred. To that in the end.
Lexemes - "var", "language", "lox".
We wont be using regexes to recognize different lexemes. We have to understand how the scanner truly works.